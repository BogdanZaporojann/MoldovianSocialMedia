{"ast":null,"code":"import { userAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  usersData: [],\n  totalUsersCount: 0,\n  pageSize: 10,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\nexport const usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        usersData: state.usersData.map(user => {\n          if (user.id === action.userId) {\n            return { ...user,\n              followed: true\n            };\n          }\n\n          return user;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        usersData: state.usersData.map(user => {\n          if (user.id === action.userId) {\n            return { ...user,\n              followed: false\n            };\n          }\n\n          return user;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        usersData: [...action.users]\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n};\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId: userId\n});\nexport const unfollow = userId => ({\n  type: UNFOLLOW,\n  userId: userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users: users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage: currentPage\n});\nexport const setTotalUsersCount = count => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: count\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching: isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    userAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const onUnfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    userAPI.unfollow(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(unfollow(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const onFollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    userAPI.follow(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(follow(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};","map":{"version":3,"names":["userAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","usersData","totalUsersCount","pageSize","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","user","id","userId","followed","users","count","filter","followSuccess","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","then","data","items","totalCount","onUnfollow","resultCode","onFollow","follow"],"sources":["/home/bogdan/Рабочий стол/neverGiveUp/src/redux/users-reducer.js"],"sourcesContent":["import {userAPI} from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\n\n\n\nlet initialState = {\n    usersData: [],\n    totalUsersCount: 0,\n    pageSize: 10,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: []\n\n}\n\nexport const usersReducer = (state = initialState, action) =>{\n\n\n    switch (action.type){\n        case FOLLOW:\n            return {\n                ...state,\n                usersData: state.usersData.map( user => {\n                    if(user.id ===action.userId){\n                        return {...user, followed: true};\n                    }\n                    return user;\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                usersData: state.usersData.map( user => {\n                    if(user.id === action.userId){\n                        return {...user, followed: false};\n                    }\n                    return user;\n                })\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                usersData: [...action.users]\n            }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const followSuccess = (userId) => ({\n    type: FOLLOW,\n    userId: userId\n})\n\nexport const unfollow = (userId) => ({\n    type: UNFOLLOW,\n    userId: userId\n})\n\nexport const setUsers = (users) => ({\n    type: SET_USERS,\n    users: users\n})\n\nexport const setCurrentPage = (currentPage) => ({\n    type: SET_CURRENT_PAGE,\n    currentPage: currentPage\n})\n\nexport const setTotalUsersCount = (count) => ({\n    type: SET_TOTAL_USERS_COUNT,\n    count: count\n})\n\nexport const toggleIsFetching = (isFetching) => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching: isFetching\n})\n\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n\n})\n\nexport const getUsers = (currentPage, pageSize) => {\n    return (dispatch) => {\n\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(currentPage));\n        userAPI.getUsers(currentPage, pageSize)\n            .then(data => {\n                dispatch(toggleIsFetching(false));\n                dispatch(setUsers(data.items));\n                dispatch(setTotalUsersCount(data.totalCount));\n            })\n    }\n}\n\nexport const onUnfollow = (userId) => {\n    return (dispatch) => {\n\n        dispatch(toggleFollowingProgress(true, userId));\n        userAPI.unfollow(userId)\n            .then(data => {\n                if(data.resultCode==0){\n                    dispatch(unfollow(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId))\n            })\n\n    }\n}\n\nexport const onFollow = (userId) => {\n    return (dispatch) => {\n\n\n        dispatch(toggleFollowingProgress(true, userId));\n        userAPI.follow(userId)\n            .then(data => {\n                if(data.resultCode==0){\n                    dispatch(follow(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}