{"ast":null,"code":"import { authAPI, captchaAPI } from \"../api/api.js\";\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    case GET_CAPTCHA_URL_SUCCESS:\n      {\n        return { ...state,\n          captchaUrl: action.captchaUrl\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\nexport const setAuthUserData = (userId, login, email, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    login,\n    email,\n    isAuth\n  }\n});\n\nconst getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  captchaUrl\n});\n\nexport const getAuthUserData = () => async dispatch => {\n  let data = await authAPI.me();\n\n  if (data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = data.data;\n    dispatch(setAuthUserData(id, login, email, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let result = await authAPI.login(email, password, rememberMe);\n\n  if (result.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  }\n};\nexport const logout = () => async dispatch => {\n  let result = await authAPI.logout();\n  debugger;\n\n  if (result.data.resultCode === 0) {\n    debugger;\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const urlCaptcha = await captchaAPI.getCaptcha();\n  dispatch(getCaptchaUrlSuccess(urlCaptcha));\n};","map":{"version":3,"names":["authAPI","captchaAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","data","me","resultCode","id","password","rememberMe","result","logout","getCaptchaUrl","urlCaptcha","getCaptcha"],"sources":["/home/bogdan/Рабочий стол/neverGiveUp/src/redux/auth-reducer.ts"],"sourcesContent":["import {authAPI,captchaAPI} from \"../api/api.js\";\n\n\nconst SET_USER_DATA='auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\n\nexport type InitialStateType = {\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    captchaUrl: string | null\n}\n\nlet initialState: InitialStateType = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null\n}\n\n\n\nexport const authReducer = (state=initialState, action: any): InitialStateType  => {\n    switch (action.type){\n        case SET_USER_DATA: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                captchaUrl: action.captchaUrl\n            }\n        }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\n\n\ntype SetAuthUSerDataActionType = {\n    type: typeof SET_USER_DATA,\n    payload: SetAuthUSerDataActionPayloadType\n}\n\ntype SetAuthUSerDataActionPayloadType = {\n    userId: number | null,\n    login: string | null,\n    email: string | null,\n    isAuth: boolean\n}\n\nexport const setAuthUserData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean) : SetAuthUSerDataActionType => ({\n    type:SET_USER_DATA,\n    payload: {userId, login, email, isAuth}\n})\n\n\n\n\nexport type GetCaptchaUrlSuccessType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\n    captchaUrl: string | null\n}\n\nconst getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    captchaUrl\n})\n\n\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n    let data = await authAPI.me();\n\n            if(data.resultCode === 0) {\n                let {id,login, email} = data.data;\n                dispatch(setAuthUserData(id,login,email,true));\n            }\n}\n\n\n\n\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\n    \n    let result = await authAPI.login(email, password, rememberMe);\n            if(result.data.resultCode === 0){\n                dispatch(getAuthUserData())\n            }\n}\n\nexport const logout = () => async (dispatch: any) => {\n    let result = await authAPI.logout()\n    debugger\n            if(result.data.resultCode === 0){\n                debugger\n                dispatch(setAuthUserData(null,null,null,false))\n            }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: any) =>  {\n    const urlCaptcha = await captchaAPI.getCaptcha();\n    dispatch(getCaptchaUrlSuccess(urlCaptcha))\n}\n\n"],"mappings":"AAAA,SAAQA,OAAR,EAAgBC,UAAhB,QAAiC,eAAjC;AAGA,MAAMC,aAAa,GAAC,oBAApB;AACA,MAAMC,uBAAuB,GAAG,yBAAhC;AAUA,IAAIC,YAA8B,GAAG;EACjCC,MAAM,EAAE,IADyB;EAEjCC,KAAK,EAAE,IAF0B;EAGjCC,KAAK,EAAE,IAH0B;EAIjCC,MAAM,EAAE,KAJyB;EAKjCC,UAAU,EAAE;AALqB,CAArC;AAUA,OAAO,MAAMC,WAAW,GAAG,YAAwD;EAAA,IAAvDC,KAAuD,uEAAjDP,YAAiD;EAAA,IAAnCQ,MAAmC;;EAC/E,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKX,aAAL;MAAoB;QAChB,OAAO,EACH,GAAGS,KADA;UAEH,GAAGC,MAAM,CAACE;QAFP,CAAP;MAIH;;IACD,KAAKX,uBAAL;MAA8B;QAC1B,OAAO,EACH,GAAGQ,KADA;UAEHF,UAAU,EAAEG,MAAM,CAACH;QAFhB,CAAP;MAIH;;IACD;MACI,OAAO,EACH,GAAGE;MADA,CAAP;EAdR;AAkBH,CAnBM;AAmCP,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAAwBE,KAAxB,EAA8CD,KAA9C,EAAoEE,MAApE,MAAqH;EAChJK,IAAI,EAACX,aAD2I;EAEhJY,OAAO,EAAE;IAACT,MAAD;IAASE,KAAT;IAAgBD,KAAhB;IAAuBE;EAAvB;AAFuI,CAArH,CAAxB;;AAaP,MAAMQ,oBAAoB,GAAIP,UAAD,KAAmD;EAC5EI,IAAI,EAAEV,uBADsE;EAE5EM;AAF4E,CAAnD,CAA7B;;AAOA,OAAO,MAAMQ,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAyB;EAC1D,IAAIC,IAAI,GAAG,MAAMnB,OAAO,CAACoB,EAAR,EAAjB;;EAEQ,IAAGD,IAAI,CAACE,UAAL,KAAoB,CAAvB,EAA0B;IACtB,IAAI;MAACC,EAAD;MAAIf,KAAJ;MAAWD;IAAX,IAAoBa,IAAI,CAACA,IAA7B;IACAD,QAAQ,CAACH,eAAe,CAACO,EAAD,EAAIf,KAAJ,EAAUD,KAAV,EAAgB,IAAhB,CAAhB,CAAR;EACH;AACZ,CAPM;AAYP,OAAO,MAAMC,KAAK,GAAG,CAACD,KAAD,EAAgBiB,QAAhB,EAAkCC,UAAlC,KAA0D,MAAON,QAAP,IAAyB;EAEpG,IAAIO,MAAM,GAAG,MAAMzB,OAAO,CAACO,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,CAAnB;;EACQ,IAAGC,MAAM,CAACN,IAAP,CAAYE,UAAZ,KAA2B,CAA9B,EAAgC;IAC5BH,QAAQ,CAACD,eAAe,EAAhB,CAAR;EACH;AACZ,CANM;AAQP,OAAO,MAAMS,MAAM,GAAG,MAAM,MAAOR,QAAP,IAAyB;EACjD,IAAIO,MAAM,GAAG,MAAMzB,OAAO,CAAC0B,MAAR,EAAnB;EACA;;EACQ,IAAGD,MAAM,CAACN,IAAP,CAAYE,UAAZ,KAA2B,CAA9B,EAAgC;IAC5B;IACAH,QAAQ,CAACH,eAAe,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,KAAhB,CAAhB,CAAR;EACH;AACZ,CAPM;AASP,OAAO,MAAMY,aAAa,GAAG,MAAM,MAAOT,QAAP,IAA0B;EACzD,MAAMU,UAAU,GAAG,MAAM3B,UAAU,CAAC4B,UAAX,EAAzB;EACAX,QAAQ,CAACF,oBAAoB,CAACY,UAAD,CAArB,CAAR;AACH,CAHM"},"metadata":{},"sourceType":"module"}