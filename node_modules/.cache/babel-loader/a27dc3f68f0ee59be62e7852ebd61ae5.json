{"ast":null,"code":"import { profileAPI } from \"../api/profileAPI\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst SET_USER_PHOTO_SUCCESS = 'SET_USER_PHOTO_SUCCESS';\nlet initialState = {\n  profileData: [{\n    id: 1,\n    text: 'Text 1',\n    likesCount: 1\n  }, {\n    id: 2,\n    text: 'Text 2',\n    likesCount: 2\n  }, {\n    id: 3,\n    text: 'Text 3',\n    likesCount: 3\n  }],\n  profile: null,\n  status: '',\n  newPostText: ''\n};\nexport const profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let body = action.newPostText;\n        return { ...state,\n          profileData: [...state.profileData, {\n            id: 5,\n            likesCount: 1,\n            text: body\n          }],\n          newPostText: ''\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            ...action.profile\n          }\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case SET_USER_PHOTO_SUCCESS:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            ...action,\n            photos: action.photos\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const addPost = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const savePhotoSuccess = photos => ({\n  type: SET_USER_PHOTO_SUCCESS,\n  photos\n});\nexport const getUserStatus = userId => {\n  return async dispatch => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(setStatus(data));\n  };\n};\nexport const updateUserStatus = status => {\n  return async dispatch => {\n    let data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  };\n};\nexport const getUserProfile = userId => {\n  return async dispatch => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(setUserProfile(data));\n  };\n};\nexport const updateUserPersonalInfo = profile => {\n  return async dispatch => {\n    let data = await profileAPI.updatePersonalInformation(profile);\n    console.log(data);\n\n    if (data.resultCode === 0) {\n      dispatch(setUserProfile(profile));\n    }\n  };\n};\nexport const savePhoto = file => {\n  return async dispatch => {\n    let response = await profileAPI.savePhoto(file);\n\n    if (response.resultCode === 0) {\n      dispatch(savePhotoSuccess(response.data.photos));\n    }\n  };\n};","map":{"version":3,"names":["profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","SET_USER_PHOTO_SUCCESS","initialState","profileData","id","text","likesCount","profile","status","newPostText","profileReducer","state","action","type","body","photos","addPost","setUserProfile","setStatus","savePhotoSuccess","getUserStatus","userId","dispatch","data","getStatus","updateUserStatus","updateStatus","resultCode","getUserProfile","getProfile","updateUserPersonalInfo","updatePersonalInformation","console","log","savePhoto","file","response"],"sources":["C:/Users/37360/Desktop/Lucru/MoldovianSocialMedia/src/redux/profile-reducer.ts"],"sourcesContent":["import {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\n\r\nconst ADD_POST= 'ADD-POST'\r\nconst SET_USER_PROFILE='SET_USER_PROFILE';\r\nconst SET_STATUS='SET_STATUS';\r\nconst SET_USER_PHOTO_SUCCESS = 'SET_USER_PHOTO_SUCCESS'\r\n\r\n\r\nlet initialState = {\r\n    profileData: [\r\n        {\r\n            id: 1,\r\n            text: 'Text 1',\r\n            likesCount: 1\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Text 2',\r\n            likesCount:2\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Text 3',\r\n            likesCount:3\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status:'',\r\n    newPostText: ''\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: any) : InitialStateType  => {\r\n    switch (action.type){\r\n        case ADD_POST : {\r\n            let body = action.newPostText;\r\n            return {\r\n                ...state,\r\n                profileData: [...state.profileData, {id: 5, likesCount: 1, text: body}],\r\n                newPostText: ''\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile,}\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_USER_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action, photos:action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype ActionsType = AddPostActionType | SetUserProfileActionType | SetStatusActionType | SavePhotoSuccessType\r\n\r\n\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n}\r\n\r\nexport const addPost = (newPostText: string): AddPostActionType => ({\r\n    type: ADD_POST,\r\n    newPostText\r\n})\r\n\r\n\r\n\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) : SetUserProfileActionType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n})\r\n\r\n\r\n\r\n\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS,\r\n    status: string\r\n}\r\n\r\nexport const setStatus = (status: string): SetStatusActionType => ({\r\n        type: SET_STATUS,\r\n        status\r\n})\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SET_USER_PHOTO_SUCCESS,\r\n    photos: any\r\n} \r\n\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessType => ({\r\n    type: SET_USER_PHOTO_SUCCESS,\r\n    photos\r\n})\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionsType>;\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => {\r\n\r\n        return async (dispatch) => {\r\n        let data = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(data));\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => {\r\n\r\n        return async (dispatch) => {\r\n\r\n        let data = await profileAPI.updateStatus(status)\r\n        if(data.resultCode === 0) {\r\n\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => {\r\n\r\n        return async (dispatch) => {\r\n        let data = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(data));\r\n    }\r\n}\r\n\r\nexport const updateUserPersonalInfo = (profile: ProfileType) : ThunkType => {\r\n\r\n        return async  (dispatch) => {\r\n        let data = await profileAPI.updatePersonalInformation(profile)\r\n        console.log(data)\r\n        if(data.resultCode === 0){\r\n            dispatch(setUserProfile(profile))\r\n            }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file : any) : ThunkType => {\r\n\r\n\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.savePhoto(file)\r\n        if(response.resultCode===0){\r\n            dispatch(savePhotoSuccess(response.data.photos))\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAGA,SAAQA,UAAR,QAAyB,mBAAzB;AAEA,MAAMC,QAAQ,GAAE,UAAhB;AACA,MAAMC,gBAAgB,GAAC,kBAAvB;AACA,MAAMC,UAAU,GAAC,YAAjB;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AAGA,IAAIC,YAAY,GAAG;EACfC,WAAW,EAAE,CACT;IACIC,EAAE,EAAE,CADR;IAEIC,IAAI,EAAE,QAFV;IAGIC,UAAU,EAAE;EAHhB,CADS,EAMT;IACIF,EAAE,EAAE,CADR;IAEIC,IAAI,EAAE,QAFV;IAGIC,UAAU,EAAC;EAHf,CANS,EAWT;IACIF,EAAE,EAAE,CADR;IAEIC,IAAI,EAAE,QAFV;IAGIC,UAAU,EAAC;EAHf,CAXS,CADE;EAkBfC,OAAO,EAAE,IAlBM;EAmBfC,MAAM,EAAC,EAnBQ;EAoBfC,WAAW,EAAE;AApBE,CAAnB;AAyBA,OAAO,MAAMC,cAAc,GAAG,YAA2D;EAAA,IAA1DC,KAA0D,uEAAlDT,YAAkD;EAAA,IAApCU,MAAoC;;EACrF,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKf,QAAL;MAAgB;QACZ,IAAIgB,IAAI,GAAGF,MAAM,CAACH,WAAlB;QACA,OAAO,EACH,GAAGE,KADA;UAEHR,WAAW,EAAE,CAAC,GAAGQ,KAAK,CAACR,WAAV,EAAuB;YAACC,EAAE,EAAE,CAAL;YAAQE,UAAU,EAAE,CAApB;YAAuBD,IAAI,EAAES;UAA7B,CAAvB,CAFV;UAGHL,WAAW,EAAE;QAHV,CAAP;MAKH;;IACD,KAAKV,gBAAL;MAAuB;QACnB,OAAO,EACH,GAAGY,KADA;UAEHJ,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;YAAmB,GAAGK,MAAM,CAACL;UAA7B;QAFN,CAAP;MAIH;;IACD,KAAKP,UAAL;MAAiB;QACb,OAAO,EACH,GAAGW,KADA;UAEHH,MAAM,EAAEI,MAAM,CAACJ;QAFZ,CAAP;MAIH;;IACD,KAAKP,sBAAL;MAA6B;QACzB,OAAO,EACH,GAAGU,KADA;UAEHJ,OAAO,EAAE,EAAC,GAAGI,KAAK,CAACJ,OAAV;YAAmB,GAAGK,MAAtB;YAA8BG,MAAM,EAACH,MAAM,CAACG;UAA5C;QAFN,CAAP;MAIH;;IACD;MACI,OAAOJ,KAAP;EA5BR;AA8BH,CA/BM;AA2CP,OAAO,MAAMK,OAAO,GAAIP,WAAD,KAA6C;EAChEI,IAAI,EAAEf,QAD0D;EAEhEW;AAFgE,CAA7C,CAAhB;AAaP,OAAO,MAAMQ,cAAc,GAAIV,OAAD,KAAsD;EAChFM,IAAI,EAAEd,gBAD0E;EAEhFQ;AAFgF,CAAtD,CAAvB;AAaP,OAAO,MAAMW,SAAS,GAAIV,MAAD,KAA0C;EAC3DK,IAAI,EAAEb,UADqD;EAE3DQ;AAF2D,CAA1C,CAAlB;AAUP,OAAO,MAAMW,gBAAgB,GAAIJ,MAAD,KAA+C;EAC3EF,IAAI,EAAEZ,sBADqE;EAE3Ec;AAF2E,CAA/C,CAAzB;AASP,OAAO,MAAMK,aAAa,GAAIC,MAAD,IAA+B;EAEpD,OAAO,MAAOC,QAAP,IAAoB;IAC3B,IAAIC,IAAI,GAAG,MAAM1B,UAAU,CAAC2B,SAAX,CAAqBH,MAArB,CAAjB;IACAC,QAAQ,CAACJ,SAAS,CAACK,IAAD,CAAV,CAAR;EACH,CAHG;AAIP,CANM;AAQP,OAAO,MAAME,gBAAgB,GAAIjB,MAAD,IAA+B;EAEvD,OAAO,MAAOc,QAAP,IAAoB;IAE3B,IAAIC,IAAI,GAAG,MAAM1B,UAAU,CAAC6B,YAAX,CAAwBlB,MAAxB,CAAjB;;IACA,IAAGe,IAAI,CAACI,UAAL,KAAoB,CAAvB,EAA0B;MAEtBL,QAAQ,CAACJ,SAAS,CAACV,MAAD,CAAV,CAAR;IACH;EACJ,CAPG;AAQP,CAVM;AAYP,OAAO,MAAMoB,cAAc,GAAIP,MAAD,IAA+B;EAErD,OAAO,MAAOC,QAAP,IAAoB;IAC3B,IAAIC,IAAI,GAAG,MAAM1B,UAAU,CAACgC,UAAX,CAAsBR,MAAtB,CAAjB;IACAC,QAAQ,CAACL,cAAc,CAACM,IAAD,CAAf,CAAR;EACH,CAHG;AAIP,CANM;AAQP,OAAO,MAAMO,sBAAsB,GAAIvB,OAAD,IAAsC;EAEpE,OAAO,MAAQe,QAAR,IAAqB;IAC5B,IAAIC,IAAI,GAAG,MAAM1B,UAAU,CAACkC,yBAAX,CAAqCxB,OAArC,CAAjB;IACAyB,OAAO,CAACC,GAAR,CAAYV,IAAZ;;IACA,IAAGA,IAAI,CAACI,UAAL,KAAoB,CAAvB,EAAyB;MACrBL,QAAQ,CAACL,cAAc,CAACV,OAAD,CAAf,CAAR;IACC;EACR,CANG;AAOP,CATM;AAWP,OAAO,MAAM2B,SAAS,GAAIC,IAAD,IAA4B;EAGjD,OAAO,MAAOb,QAAP,IAAoB;IACvB,IAAIc,QAAQ,GAAG,MAAMvC,UAAU,CAACqC,SAAX,CAAqBC,IAArB,CAArB;;IACA,IAAGC,QAAQ,CAACT,UAAT,KAAsB,CAAzB,EAA2B;MACvBL,QAAQ,CAACH,gBAAgB,CAACiB,QAAQ,CAACb,IAAT,CAAcR,MAAf,CAAjB,CAAR;IACH;EACJ,CALD;AAMH,CATM"},"metadata":{},"sourceType":"module"}