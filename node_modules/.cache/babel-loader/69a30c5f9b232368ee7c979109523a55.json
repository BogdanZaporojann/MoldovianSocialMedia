{"ast":null,"code":"import { profileAPI } from \"../api/profileAPI\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst SET_USER_PERSONAL_INFO = 'SET_USER_PERSONAL_INFO';\nlet initialState = {\n  profileData: [{\n    id: 1,\n    text: 'Text 1',\n    likesCount: 1\n  }, {\n    id: 2,\n    text: 'Text 2',\n    likesCount: 2\n  }, {\n    id: 3,\n    text: 'Text 3',\n    likesCount: 3\n  }],\n  profile: null,\n  status: '',\n  newPostText: ''\n};\nexport const profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let body = action.newPostText;\n        return { ...state,\n          profileData: [...state.profileData, {\n            id: 5,\n            likesCount: 1,\n            text: body\n          }],\n          newPostText: ''\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case SET_USER_PERSONAL_INFO:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            ...action.profile\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const addPost = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const getUserStatus = userId => {\n  return async dispatch => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(setStatus(data));\n  };\n};\nexport const updateUserStatus = status => {\n  return async dispatch => {\n    let data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  };\n};\nexport const getUserProfile = userId => {\n  return async dispatch => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(setUserProfile(data));\n  };\n};\nexport const updateUserPersonalInfo = profile => {\n  return async dispatch => {\n    let data = await profileAPI.updatePersonalInformation(profile);\n\n    if (data.resultCode === 0) {// dispatch(updateUserPersonalInfo(profile))\n    }\n  };\n}; // type SetUserPersonalInfoType = {\n//     type: typeof SET_USER_PERSONAL_INFO,\n//     profile: ProfileType\n// }\n//\n// const setUserPersonalInfo = (profile: ProfileType): SetUserPersonalInfoType => ({\n//     type: SET_USER_PERSONAL_INFO,\n//     profile\n// })","map":{"version":3,"names":["profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","SET_USER_PERSONAL_INFO","initialState","profileData","id","text","likesCount","profile","status","newPostText","profileReducer","state","action","type","body","addPost","setUserProfile","setStatus","getUserStatus","userId","dispatch","data","getStatus","updateUserStatus","updateStatus","resultCode","getUserProfile","getProfile","updateUserPersonalInfo","updatePersonalInformation"],"sources":["/home/bogdan/Рабочий стол/neverGiveUp/src/redux/profile-reducer.ts"],"sourcesContent":["import {PostType, ProfileType} from \"../types/types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./redux-store\";\nimport {profileAPI} from \"../api/profileAPI\";\n\nconst ADD_POST= 'ADD-POST'\nconst SET_USER_PROFILE='SET_USER_PROFILE';\nconst SET_STATUS='SET_STATUS';\nconst SET_USER_PERSONAL_INFO = 'SET_USER_PERSONAL_INFO'\n\nlet initialState = {\n    profileData: [\n        {\n            id: 1,\n            text: 'Text 1',\n            likesCount: 1\n        },\n        {\n            id: 2,\n            text: 'Text 2',\n            likesCount:2\n        },\n        {\n            id: 3,\n            text: 'Text 3',\n            likesCount:3\n        }\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status:'',\n    newPostText: ''\n}\n\nexport type InitialStateType = typeof initialState;\n\nexport const profileReducer = (state = initialState, action: any) : InitialStateType  => {\n    switch (action.type){\n        case ADD_POST : {\n            let body = action.newPostText;\n            return {\n                ...state,\n                profileData: [...state.profileData, {id: 5, likesCount: 1, text: body}],\n                newPostText: ''\n            }\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case SET_USER_PERSONAL_INFO: {\n            return {\n                ...state,\n                profile: {...state.profile, ...action.profile}\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\ntype ActionsType = AddPostActionType | SetUserProfileActionType | SetStatusActionType\n\n\n\ntype AddPostActionType = {\n    type: typeof ADD_POST,\n    newPostText: string\n}\n\nexport const addPost = (newPostText: string): AddPostActionType => ({\n    type: ADD_POST,\n    newPostText\n})\n\n\n\n\ntype SetUserProfileActionType = {\n    type: typeof SET_USER_PROFILE,\n    profile: ProfileType\n}\n\nexport const setUserProfile = (profile: ProfileType) : SetUserProfileActionType => ({\n    type: SET_USER_PROFILE,\n    profile\n})\n\n\n\n\ntype SetStatusActionType = {\n    type: typeof SET_STATUS,\n    status: string\n}\n\nexport const setStatus = (status: string): SetStatusActionType => ({\n        type: SET_STATUS,\n        status\n})\n\n\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionsType>;\n\nexport const getUserStatus = (userId: number): ThunkType => {\n\n        return async (dispatch) => {\n        let data = await profileAPI.getStatus(userId)\n        dispatch(setStatus(data));\n    }\n}\n\nexport const updateUserStatus = (status: string): ThunkType => {\n\n        return async (dispatch) => {\n        let data = await profileAPI.updateStatus(status)\n        if(data.resultCode === 0) {\n            dispatch(setStatus(status))\n        }\n    }\n}\n\nexport const getUserProfile = (userId: number): ThunkType => {\n\n        return async (dispatch) => {\n        let data = await profileAPI.getProfile(userId)\n        dispatch(setUserProfile(data));\n    }\n}\n\nexport const updateUserPersonalInfo = (profile: ProfileType) : ThunkType => {\n\n        return async  (dispatch) => {\n        let data = await profileAPI.updatePersonalInformation(profile)\n        if(data.resultCode === 0){\n            // dispatch(updateUserPersonalInfo(profile))\n        }\n    }\n}\n\n// type SetUserPersonalInfoType = {\n//     type: typeof SET_USER_PERSONAL_INFO,\n//     profile: ProfileType\n// }\n//\n// const setUserPersonalInfo = (profile: ProfileType): SetUserPersonalInfoType => ({\n//     type: SET_USER_PERSONAL_INFO,\n//     profile\n// })"],"mappings":"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"},"metadata":{},"sourceType":"module"}