{"ast":null,"code":"import { authAPI, captchaAPI } from \"../api/api\";\nimport { ResultCodesEnum } from \"../api/api\";\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    case GET_CAPTCHA_URL_SUCCESS:\n      {\n        return { ...state,\n          captchaUrl: action.captchaUrl\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\nexport const setAuthUserData = (userId, login, email, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    login,\n    email,\n    isAuth\n  }\n});\n\nconst getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  captchaUrl\n});\n\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    let data = await authAPI.me();\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n      let {\n        id,\n        login,\n        email\n      } = data.data;\n      dispatch(setAuthUserData(id, login, email, true));\n    }\n  };\n};\nexport const login = (email, password, rememberMe, captchaUrl) => {\n  return async dispatch => {\n    let result = await authAPI.login(email, password, rememberMe, captchaUrl);\n\n    if (result.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUserData());\n      dispatch(getCaptchaUrlSuccess(null));\n    }\n\n    if (result.data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\n      debugger;\n      dispatch(getCaptchaUrl());\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    let result = await authAPI.logout();\n\n    if (result.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  };\n};\nexport const getCaptchaUrl = () => {\n  return async dispatch => {\n    const urlCaptcha = await captchaAPI.getCaptcha();\n    dispatch(getCaptchaUrlSuccess(urlCaptcha));\n  };\n};","map":{"version":3,"names":["authAPI","captchaAPI","ResultCodesEnum","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","data","me","resultCode","Success","id","password","rememberMe","result","CaptchaIsRequired","getCaptchaUrl","logout","urlCaptcha","getCaptcha"],"sources":["/home/bogdan/Рабочий стол/neverGiveUp/src/redux/auth-reducer.ts"],"sourcesContent":["import {authAPI,captchaAPI} from \"../api/api\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./redux-store\";\nimport {ResultCodesEnum} from \"../api/api\";\n\n\nconst SET_USER_DATA='auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\n\nexport type InitialStateType = {\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    captchaUrl: string | null\n}\n\nlet initialState: InitialStateType = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null\n}\n\n\n\nexport const authReducer = (state=initialState, action: any): InitialStateType  => {\n    switch (action.type){\n        case SET_USER_DATA: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                captchaUrl: action.captchaUrl\n            }\n        }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\ntype ActionsTypes = SetAuthUserDataActionType | GetCaptchaUrlSuccessType\n\n\ntype SetAuthUserDataActionPayloadType = {\n    userId: number | null,\n    login: string | null,\n    email: string | null,\n    isAuth: boolean\n}\n\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA,\n    payload: SetAuthUserDataActionPayloadType\n}\n\nexport const setAuthUserData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean) : SetAuthUserDataActionType => ({\n    type:SET_USER_DATA,\n    payload: {userId, login, email, isAuth}\n})\n\n\n\n\nexport type GetCaptchaUrlSuccessType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\n    captchaUrl: string | null\n}\n\nconst getCaptchaUrlSuccess = (captchaUrl: string | null): GetCaptchaUrlSuccessType => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    captchaUrl\n})\n\n\n\n\n\n\n\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, any, ActionsTypes>\n\nexport const getAuthUserData = (): ThunkType => {\n\n        return async (dispatch) => {\n        let data = await authAPI.me();\n\n        if(data.resultCode === ResultCodesEnum.Success) {\n            let {id,login, email} = data.data;\n            dispatch(setAuthUserData(id,login,email,true));\n        }\n    }\n}\n\n\n\n\nexport const login = (email: string, password: string, rememberMe: boolean,captchaUrl:string): ThunkType => {\n\n        return async (dispatch) => {\n        let result = await authAPI.login(email, password, rememberMe,captchaUrl);\n        if(result.data.resultCode === ResultCodesEnum.Success){\n            dispatch(getAuthUserData())\n            dispatch(getCaptchaUrlSuccess(null));\n        }\n        if(result.data.resultCode === ResultCodesEnum.CaptchaIsRequired){\n            debugger\n            dispatch(getCaptchaUrl())\n        }\n    }\n}\n\nexport const logout = (): ThunkType => {\n\n        return async (dispatch) => {\n        let result = await authAPI.logout()\n        if(result.data.resultCode === ResultCodesEnum.Success){\n            dispatch(setAuthUserData(null,null,null,false))\n        }\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => {\n\n        return async (dispatch) =>  {\n        const urlCaptcha = await captchaAPI.getCaptcha();\n        dispatch(getCaptchaUrlSuccess(urlCaptcha))\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}