{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { getUsers, onFollow, onUnfollow } from \"../../redux/users-reducer\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { getCurrentPage, getFollowingInProgress, getIsAuth, getIsFetching, getPageSize, getTotalUsersCount } from \"../../redux/users-selectors\";\nvar any = jasmine.any;\n\n// class UsersContainer extends React.Component<PropsType>{\n//\n//     componentDidMount() {\n//         this.props.getUsers(this.props.currentPage, this.props.pageSize);\n//     }\n//\n//     onPageChanged = (pageNumber: number) => {\n//         const {pageSize} = this.props\n//         this.props.getUsers(pageNumber, pageSize);\n//     }\n//\n//\n//     render(){\n//\n//\n//         return(\n//             <>\n//\n//                 {this.props.isFetching\n//                     ? <Preloader />\n//                     : null}\n//                 <Users usersData={this.props.usersData}\n//                        totalUsersCount={this.props.totalUsersCount}\n//                        pageSize={this.props.pageSize}\n//                        currentPage={this.props.currentPage}\n//                        followingInProgress={this.props.followingInProgress}\n//                        onFollow={this.props.onFollow}\n//                        onUnfollow={this.props.onUnfollow}\n//                        onPageChanged={this.onPageChanged}/>\n//             </>\n//         );\n//     }\n// }\nlet mapStateToProps = state => ({\n  usersData: state.usersPage.usersData,\n  pageSize: getPageSize(state),\n  totalUsersCount: getTotalUsersCount(state),\n  currentPage: getCurrentPage(state),\n  isFetching: getIsFetching(state),\n  followingInProgress: getFollowingInProgress(state),\n  isAuth: getIsAuth(state)\n});\n\nexport default compose(connect(mapStateToProps, {\n  getUsers,\n  onFollow,\n  onUnfollow\n}), withAuthRedirect);","map":{"version":3,"names":["connect","getUsers","onFollow","onUnfollow","withAuthRedirect","compose","getCurrentPage","getFollowingInProgress","getIsAuth","getIsFetching","getPageSize","getTotalUsersCount","any","jasmine","mapStateToProps","state","usersData","usersPage","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","isAuth"],"sources":["/home/bogdan/Рабочий стол/neverGiveUp/src/components/Users/UsersContainer.tsx"],"sourcesContent":["import {connect} from \"react-redux\";\nimport {getUsers, onFollow, onUnfollow} from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport {Users} from \"./Users\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsAuth,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount\n} from \"../../redux/users-selectors\";\nimport {UserType} from \"../../types/types\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport any = jasmine.any;\n\n\ntype PropsType = {\n    currentPage: number\n    pageSize: number\n    isFetching: boolean\n    usersData: Array<UserType>\n    totalUsersCount: number\n    followingInProgress: Array<number>\n\n\n    getUsers: (currentPage: number,pageSize: number) => void\n    onFollow: (userId: number) => void\n    onUnfollow: (userId: number) => void\n}\n\n// class UsersContainer extends React.Component<PropsType>{\n//\n//     componentDidMount() {\n//         this.props.getUsers(this.props.currentPage, this.props.pageSize);\n//     }\n//\n//     onPageChanged = (pageNumber: number) => {\n//         const {pageSize} = this.props\n//         this.props.getUsers(pageNumber, pageSize);\n//     }\n//\n//\n//     render(){\n//\n//\n//         return(\n//             <>\n//\n//                 {this.props.isFetching\n//                     ? <Preloader />\n//                     : null}\n//                 <Users usersData={this.props.usersData}\n//                        totalUsersCount={this.props.totalUsersCount}\n//                        pageSize={this.props.pageSize}\n//                        currentPage={this.props.currentPage}\n//                        followingInProgress={this.props.followingInProgress}\n//                        onFollow={this.props.onFollow}\n//                        onUnfollow={this.props.onUnfollow}\n//                        onPageChanged={this.onPageChanged}/>\n//             </>\n//         );\n//     }\n// }\n\n\nlet mapStateToProps = (state: AppStateType)  => ({\n    usersData: state.usersPage.usersData,\n    pageSize: getPageSize(state),\n    totalUsersCount: getTotalUsersCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n    isAuth: getIsAuth(state)\n\n})\n\n\nexport default compose(\n    connect(mapStateToProps, {getUsers, onFollow, onUnfollow}),\n    withAuthRedirect\n)"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,UAA5B,QAA6C,2BAA7C;AAIA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SACIC,cADJ,EAEIC,sBAFJ,EAGIC,SAHJ,EAIIC,aAJJ,EAKIC,WALJ,EAMIC,kBANJ,QAOO,6BAPP;IAUOC,G,GAAMC,O,CAAQD,G;;AAiBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,IAAIE,eAAe,GAAIC,KAAD,KAA2B;EAC7CC,SAAS,EAAED,KAAK,CAACE,SAAN,CAAgBD,SADkB;EAE7CE,QAAQ,EAAER,WAAW,CAACK,KAAD,CAFwB;EAG7CI,eAAe,EAAER,kBAAkB,CAACI,KAAD,CAHU;EAI7CK,WAAW,EAAEd,cAAc,CAACS,KAAD,CAJkB;EAK7CM,UAAU,EAAEZ,aAAa,CAACM,KAAD,CALoB;EAM7CO,mBAAmB,EAAEf,sBAAsB,CAACQ,KAAD,CANE;EAO7CQ,MAAM,EAAEf,SAAS,CAACO,KAAD;AAP4B,CAA3B,CAAtB;;AAYA,eAAeV,OAAO,CAClBL,OAAO,CAACc,eAAD,EAAkB;EAACb,QAAD;EAAWC,QAAX;EAAqBC;AAArB,CAAlB,CADW,EAElBC,gBAFkB,CAAtB"},"metadata":{},"sourceType":"module"}